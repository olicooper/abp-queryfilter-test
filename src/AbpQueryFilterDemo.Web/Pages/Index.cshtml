@page
@using Microsoft.AspNetCore.Mvc.Localization
@using AbpQueryFilterDemo.Localization
@using Volo.Abp.Users
@using AbpQueryFilterDemo
@model AbpQueryFilterDemo.Web.Pages.IndexModel
@inject IHtmlLocalizer<AbpQueryFilterDemoResource> L
@inject ICurrentUser CurrentUser
@section styles {
    <abp-style-bundle>
        <abp-style src="/Pages/Index.css" />
    </abp-style-bundle>
}
@section scripts {
    <abp-script-bundle>
        <abp-script src="/Pages/Index.js" />
    </abp-script-bundle>
}
<div class="container">
    <h2 class="mb-3 alert alert-dark text-center text-danger">@(AbpQueryFilterDemoConsts.UseCustomFiltering ? "Using custom filtering" : "Custom filtering disabled")</h2>
    <div class="row">
        <div class="col">
            <h1 class="mt-2">@L["Blogs"] (@L["WithIncludes"])</h1>
            <div class="alert alert-info">
                Returns all non-deleted blogs and posts. Filters are applied to the related blog.Posts, so only non-deleted posts are populated in blog.Posts.
                <i>This is the default behaviour for basic EF query filters.</i>
            </div>
            <abp-table striped-rows="true" id="BlogsTable"></abp-table>

            <h1 class="mt-4 border-top">@L["Blogs"] (@L["IgnoreDeleted"])</h1>
            <div class="alert alert-info">Ignores all ISoftDelete filters for all entities.</div>
            <abp-table striped-rows="true" id="BlogsTable_IgnoreDeleted"></abp-table>

            <h1 class="mt-4 border-top">@L["Blogs"] (@L["IgnoreDeleted"] @L["Posts"])</h1>
            <div class="alert alert-info">
                Ignores the ISoftDelete filter for all blog.Posts but not the the root Blog entities.
                <br /><i>This option doesn't work when using EF query filters - it doesn't return the deleted "Post 1".</i>
            </div>
            <abp-table striped-rows="true" id="BlogsTable_IgnoreDeletedPosts"></abp-table>
        </div>

        <div class="col">
            <h1 class="mt-2">@L["Posts"] (@L["WithIncludes"])</h1>
            <div class="alert alert-info">
                Returns all non-deleted blogs and posts. Filters are applied to the related post.Blog, so if the post.Blog is deleted then the post won't be returned either.
                <i>This is the default behaviour for basic EF query filters.</i>
            </div>
            <abp-table striped-rows="true" id="PostsTable"></abp-table>

            <h1 class="mt-4 border-top">@L["Posts"] (@L["IgnoreDeleted"])</h1>
            <div class="alert alert-info">Ignores all ISoftDelete filters for all entities.</div>
            <abp-table striped-rows="true" id="PostsTable_IgnoreDeleted"></abp-table>

            <h1 class="mt-4 border-top">@L["Posts"] (@L["IgnoreDeleted"] @L["Blogs"])</h1>
            <div class="alert alert-info">
                Only non-deleted posts are returned. Ignores the ISoftDelete filter for the post.Blog.
                <br /><i>This option doesn't work when using EF query filters - it doesn't return "Post 3" and "Post 4" here because the related "Blog 2" is deleted.</i>
            </div>
            <abp-table striped-rows="true" id="PostsTable_IgnoreDeletedBlog"></abp-table>

            <h1 class="mt-4 border-top">@L["Posts"] (@L["NoIncludes"])</h1>
            <div class="alert alert-info">Only non-deleted posts are returned. Omits 'Include(...)' from the query so it won't return the post.Blog.</div>
            <abp-table striped-rows="true" id="PostsTable_ExclDetails"></abp-table>

            @*<h1 class="mt-4 border-top">@L["Posts"] (@L["NoIncludes"]) - using query syntax</h1>
            <div class="alert alert-info">Uses linq query syntax versus traditional method syntax</div>
            <abp-table striped-rows="true" id="PostsTable_ExclDetails2"></abp-table>*@
        </div>
    </div>
</div>